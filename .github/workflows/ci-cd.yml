name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main

jobs:
  # ----------------------
  # Backend - Order Service Tests
  # ----------------------
  test-order-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          cd backend/order_service
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        run: |
          cd backend/order_service
          pytest -v

  # ----------------------
  # Backend - Product Service Tests
  # ----------------------
  test-product-service:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        ports:
          - 5433:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          cd backend/product_service
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        run: |
          cd backend/product_service
          pytest -v

  # ----------------------
  # Frontend Lint/Build Check
  # ----------------------
  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Build frontend (lint check)
        run: |
          cd frontend
          echo "Frontend build successful (placeholder check)"
          # If using npm/yarn, replace with real build command

  # ----------------------
  # Build & Deploy (Only on main)
  # ----------------------
  build-and-deploy:
    runs-on: ubuntu-latest
    needs:
      - test-order-service
      - test-product-service
      - test-frontend
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build & Push Docker images
        run: |
          az acr build --registry arpitcreditacr --image frontend:latest ./frontend
          az acr build --registry arpitcreditacr --image order_service:latest ./backend/order_service
          az acr build --registry arpitcreditacr --image product_service:latest ./backend/product_service

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group Arpit_Credit-rg --name arpitcreditaks --overwrite-existing

      - name: Deploy to AKS
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/order-db.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-service.yaml
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/frontend.yaml
